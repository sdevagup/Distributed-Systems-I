/** File is: JokeClientAdmin.java, Version 1.8
 * A JokeClientAdmin,  a admin client for JokeServer. 

	Name :
	Date:
	Java version: jdk1.8.0_211
	command-line compilation instructions:
	e.g.:
		> javac JokeClientAdmin.java
	Instructions to run this program:
		> java JokeClientAdmin  [<IPADDR>] [<IPADDR>]
		> java JokeClientAdmin  localhost
		> java JokeClientAdmin  localhost
		
	Remark / Note:	
----------------------------------------------------------------------*/

import java.io.*; 						// Get the Input Output libraries
import java.net.*; 						// Get the Java networking libraries


/**
 * This is the main class which will be used for the starting the JokeClientAdmin
 * @author 
 *
 */
public class JokeClientAdmin {

	/** Create a new file output stream. **/
    static PrintStream fileOut;
    
    static void print(String data)
	{
		fileOut.print(data);
		System.out.print(data);
	}
    static void println(String data)
	{
		fileOut.println(data);
		System.out.println(data);
	}

	static public void init() {
		/** initialize the file out stream */
		try {
			if(fileOut == null)
				fileOut = new PrintStream("./JokeLog.txt");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	static public void println(IOException ioe) {
		fileOut.println(ioe.toString());
		System.out.println(ioe);
	}
	/**
	 * This is the main method and entry point for the JVM(Java virtual machine). 
	 * So whenever we run this program, this main method will be called first by the JVM.
	 * 
	 * @param args : String array of command line argument
	 */

	public static void main(String args[]) {
		
		/** Declare String object which will store the name of the server*/
		String serverName = null;
		
		/** Declare String object to store the default/primary and secondary
		 * JokeServer's address */
		String primaryServerName = null;
		String secondaryServerName = null;

		/** Default and Primary JokeServer's Admin port */
		int primaryPort = 5050;

		/** Secondary JokeServer's Admin port*/
		int secondaryPort = 5051;
		
		/** boolean variable to check whether to connect the  Secondary JokeServer
		 * or not. */
		boolean trySecondaryServer = false;

		/** Initialize the fileout stream for console and log write.*/
		init();
		
		/**Check if command line arguments are not provided*/ 
		if (args.length < 1)
		{
			/**assign the server name as 'localhost', that means it will run in local machine(Computer)*/
			serverName = "localhost";

			/** Set default address and port to JokeClientAdmin to connect.*/
			primaryServerName = serverName;
		}
			
		/**If command line argument is provided then take it from command line argument*/
		else
		{
			if (args.length == 1)
				primaryServerName = args[0];
			else if (args.length > 1)
			{
				/** Initialize the primary Server's address from first args.*/
				primaryServerName = args[0];

				/** Initialize the secondary Server's address from second args.*/
				secondaryServerName = args[1];

				/** Allow JokeClientAdmin to connect both primary and Secondary JokeServer.*/
				trySecondaryServer = true;

				println("Server one: "+primaryServerName+", port "+primaryPort);
				println("Server two: "+secondaryServerName+", port "+secondaryPort);
			}
		}

		
		/**
		 * Create the instance of the BufferedReader class to read the data from the input stream.
		 * 
		 * Buffered reader can read the data from any stream like command prompt or from some Socket.
		 * InputStreamReader will read the user input from the command line input stream.
		 */
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		
		/**
		 * Put the code in try block, so if some exception is generated by any of the code of within the try block then
		 * it can be catch and actual reason for exception can be traced.
		 */
		try {
			/**Declare the string object */
			String request;
			
			/** This loop is for sending request to JokeAdminServer to toggle
			 * the JokeServer's Mode from Joke to Proverb and vice versa.
			 * Press "Enter" or any button to send the toggle request.
			 * Type "quit" to exit the loop and code.*/
			while(true) 
			{
				/**Ask user to press enter or any button to toggle JokeServer's mode
				 * or type "quit" to quit*/
				print("Enter (enter) to toggle Joke Server mode, (quit) to end: ");
			
				/**flush the input steam before taking input from user*/
				System.out.flush();
				
				/**Read user input from the console*/
				request = in.readLine();
				
				/** If user typed "quit" than quit the app.*/
				if(request.indexOf("quit") >= 0)
					break;
				
				/**If user has not typed "quit" then connect with JokeAdminServer*/
				if (trySecondaryServer)
				{
					/** Send request to both JokeAdminServer */
					connectWithJokeAdminServer(primaryServerName, primaryPort, 1);
					connectWithJokeAdminServer(secondaryServerName, secondaryPort, 2);
				}
				else
				{
					/** Send Request to Primary JokeAdminServer*/
					connectWithJokeAdminServer(primaryServerName, primaryPort, 1);
				}
				
				
			}
			/**Print message that user cancelled the session*/
			println("Cancelled by user request.");
		} catch (IOException x) {
			/**If any exception is thrown by the any part of the code in the try block, then print the stack trace to get the reason for exception*/
			x.printStackTrace();
		}
	}

	/**
	 * This method used to communicate with the JokeAdminServer
	 * and sending the request to toggle the JokeServer's mode 
	 * @param serverName : JokeAdminServer's address
	 * @param port : JokeAdminServer's port
	 * @param connectedServer: connected to which Server
	 */
	static void connectWithJokeAdminServer(String serverName, int port, int connectedServer) {
		/**Create the instance of Socket class so that connection can be setup with the TCP server*/
		Socket sock;
		
		/**Create the instance of the read the any response from the TCP server
		 * When TCP server send any data to the TCP client then that data can be stored in BufferedReader and read by this client*/
		BufferedReader fromServer;
		
		/**Create instance of the PrintStream class to send data to TCP server,
		 *If client want to send some data the PrintStream can be used to send that data*/
		PrintStream toServer;
		
		/**Declare string object to hold the response from server*/
		String textFromServer;
		
		/**Put code in try block to handle any run time exception if generated by any code in the try block*/
		try {
			
			/**
			 * Open our connection to server port, choose your own port number..
			 */
			sock = new Socket(serverName, port);
			println("Now communicating with: "+ serverName+ ", port "+port);
			/** Initialize the BufferedReader instance with the input stream of the Socket, 
			 * So any data coming from the server can be stored in the this stream */
			fromServer = new BufferedReader(new InputStreamReader(sock.getInputStream()));
			
			
			/** Create the initialize the printStream class to send the data to server*/ 
			toServer = new PrintStream(sock.getOutputStream());
			
			/** Send machine name or IP address to server*/
			toServer.println("\n");
			
			/** flush the toStream object */
			toServer.flush();
			
			/** Read two or three lines of response from the server,
			and block while synchronously waiting */
			for (int i = 1; i <= 3; i++) {
				
				/**Read one line from the response which comes from server*/
				textFromServer = fromServer.readLine();
				
				/**Check if response from server received*/
				if (textFromServer != null)
				{	
					if(connectedServer == 2)
						print("<S2> ");
					/**Print the response received from server*/
					println(textFromServer);
				}
			}
			
			/**Close the TCP socket*/
			sock.close();
		} 
		catch (IOException x) {
		
			/**If any exception is thrown then print the socket error message*/
			System.out.println("Socket connect error. Try again/ Check server is running or not");
		}
	}

}


