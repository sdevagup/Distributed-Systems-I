
/** File is: InetClient.java, Version 1.8
A client for InetServer. Elliott, after Hughes, Shoffner, Winslow
This will not run unless TCP/IP is loaded on your machine.
----------------------------------------------------------------------*/
import java.io.*; // Get the Input Output libraries
import java.net.*; // Get the Java networking libraries

public class InetClient {
	/**
	 * This is the main method and entry point for the JVM(Java virtual machine). 
	 * So whenever we run this program, this main method will be called first by the JVM.
	 * 
	 * @param args : String array of command line argument
	 */
	public static void main(String args[]) {
		/** Declare String object which will store the name of the server*/
		String serverName;
		
		/**Check if command line arguments are not provided*/ 
		if (args.length < 1)
			/**assign the server name as 'localhost', that means it will run in local machine(Computer)*/
			serverName = "localhost";
		/**If command line argument is provided then take it from command line argument*/
		else
			serverName = args[0];
		
		/** Print information about the client*/
		System.out.println("Clark Elliott's Inet Client, 1.8.\n");
		
		/**Print the server name and port number*/
		System.out.println("Using server: " + serverName + ", Port: 1565");
		
		/**
		 * Create the instance of the BufferedReader class to read the data from the input stream.
		 * 
		 * Buffered reader can read the data from any stream like command prompt or from some Socket.
		 * InputStreamReader will read the user input from the command line input stream.
		 */
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		
		/**
		 * Put the code in try block, so if some exception is generated by any of the code of within the try block then
		 * it can be catch and actual reason for exception can be traced.
		 */
		try {
			/**Declare the string object */
			String name;
			do {
				/**Ask user to enter host name or IP address*/
				System.out.print("Enter a hostname or an IP address, (quit) to end: ");
				/**flush the input steam before taking input from user*/
				System.out.flush();
				/**Read user input from the console*/
				name = in.readLine();
				/**check if user input not contains the quit word*/
				if (name.indexOf("quit") < 0)
					/**Call the method to get the remote address*/
					getRemoteAddress(name, serverName);
			}
			/**If user not entered the quit then continue the loop otherwise quit the program*/
			while (name.indexOf("quit") < 0);
			/**Print message that user cancelled the session*/
			System.out.println("Cancelled by user request.");
		} catch (IOException x) {
			/**If any exception is thrown by the any part of the code in the try block, then print the stack trace to get the reason for exception*/
			x.printStackTrace();
		}
	}

	/**
	 * This method will convert the IP address into the byte array and it will return it in the string format 
	 * @param ip : IP in byte array
	 * @return : Return the IP address in String format
	 */
	static String toText(byte ip[]) { /* Make portable for 128 bit format */
		/**
		 * Declare the string object result of StringBuffer class.
		 * StringBuffer class can be used to make the mutable string and data can be appended into it
		 */
		StringBuffer result = new StringBuffer();
		/**Iterate through each byte of the ip byte array*/
		for (int i = 0; i < ip.length; ++i) {
			if (i > 0)
				/**Append .after each byte*/
				result.append(".");
			/**After .m append the IP byte stored in the ip array*/
			result.append(0xff & ip[i]);
		}
		/**Return the IP in the string format like*/
		return result.toString();
	}

	/**
	 * This method used to communicate with the TCP/IP server and sending the data and receiving the response from the TCP IP server. 
	 * @param name : Name of the server which needs to looked upon 
	 * @param serverName : Name of the TCP server
	 */
	static void getRemoteAddress(String name, String serverName) {
		/**Create the instance of Socket class so that connection can be setup with the TCP server*/
		Socket sock;
		
		/**Create the instance of the read the any response from the TCP server
		 * When TCP server send any data to the TCP client then that data can be stored in BufferedReader and read by this client*/
		BufferedReader fromServer;
		
		/**Create instance of the PrintStream class to send data to TCP server,
		 *If client want to send some data the PrintStream can be used to send that data*/
		PrintStream toServer;
		
		/**Declare string object to hold the response from server*/
		String textFromServer;
		
		/**Put code in try block to handle any run time exception if generated by any code in the try block*/
		try {
			
			/**
			 * Open our connection to server port, choose your own port number..
			 */
			sock = new Socket(serverName, 1565);
			
			/** Initialize the BufferedReader instance with the input stream of the Socket, 
			 * So any data coming from the server can be stored in the this stream */
			fromServer = new BufferedReader(new InputStreamReader(sock.getInputStream()));
			
			
			/** Create the initialize the printStream class to send the data to server*/ 
			toServer = new PrintStream(sock.getOutputStream());
			
			/** Send machine name or IP address to server*/
			toServer.println(name);
			
			/** flush the toStream object */
			toServer.flush();
			
			/** Read two or three lines of response from the server,
			and block while synchronously waiting */
			for (int i = 1; i <= 3; i++) {
				
				/**Read one line from the response which comes from server*/
				textFromServer = fromServer.readLine();
				
				/**Check if response from server received*/
				if (textFromServer != null)
					
					/**Print the response received from server*/
					System.out.println(textFromServer);
			}
			
			/**Close the TCP socket*/
			sock.close();
		} 
		catch (IOException x) {
		
			/**If any exception is thrown then print the socket error message*/
			System.out.println("Socket error.");
			
			/**Print the stack trace for detail exception analysis*/
			x.printStackTrace();
		}
	}
}